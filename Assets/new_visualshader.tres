[gd_resource type="VisualShader" load_steps=12 format=2]

[ext_resource path="res://Assets/new_noisetexture.tres" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=4]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 15

[resource]
code = "shader_type spatial;
uniform sampler2D tex_frg_6;


void vertex() {
// Output:0

}

void fragment() {
// Input:7
	vec3 n_out7p0;
	n_out7p0 = vec3(UV,0.0);

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	vec4 tex_frg_6_read = texture( tex_frg_6 , n_out7p0.xy );
	n_out6p0 = tex_frg_6_read.rgb;
	n_out6p1 = tex_frg_6_read.a;

// Input:2
	float n_out2p0;
	n_out2p0 = TIME;

// ScalarFunc:3
	float n_out3p0;
	n_out3p0 = sin(n_out2p0);

// ScalarOp:4
	float n_in4p1 = 2.00000;
	float n_out4p0;
	n_out4p0 = n_out3p0 / n_in4p1;

// ScalarOp:5
	float n_in5p1 = 0.50000;
	float n_out5p0;
	n_out5p0 = n_out4p0 + n_in5p1;

// ScalarOp:8
	float n_out8p0;
	n_out8p0 = dot(n_out6p0,vec3(0.333333,0.333333,0.333333)) - n_out5p0;

// ScalarFunc:9
	float n_out9p0;
	n_out9p0 = round(n_out8p0);

// ScalarOp:10
	float n_in10p1 = 0.05000;
	float n_out10p0;
	n_out10p0 = n_out8p0 - n_in10p1;

// ScalarOp:11
	float n_in11p0 = 1.00000;
	float n_out11p0;
	n_out11p0 = n_in11p0 - n_out10p0;

// Output:0
	ALPHA = n_out9p0;
	EMISSION = vec3(n_out11p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 453.112, 195.5 )
nodes/fragment/0/position = Vector2( 1440, 140 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 20, 240 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 180, 240 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( 380, 240 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( 560, 240 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 580, -20 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 400, 20 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( 796.489, 179.5 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( 960, 180 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 920, 300 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 1140, 320 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 4, 0, 5, 0, 7, 0, 6, 0, 6, 0, 8, 0, 5, 0, 8, 1, 8, 0, 9, 0, 9, 0, 0, 1, 8, 0, 10, 0, 10, 0, 11, 1, 11, 0, 0, 5 )
